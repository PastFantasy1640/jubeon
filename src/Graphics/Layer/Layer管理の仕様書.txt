
LayerManager
LayerBase
仕様説明


* 名前空間
jubeat_online::graphics::layer

* 概要
jubeat onlineでは、描写されるオブジェクトをレイヤーごとに管理します。
レイヤーは順序関係があり、下のレイヤーから順に描写されていきます。

* LayerBase
** クラス概要
レイヤーとして登録するためのスーパークラスです。SFMLのRenderTextureを継承しています。
このクラスを継承したものは、領域を確保してもその時点では何も動作をしません。
LayerManager::addLayer関数でレイヤーを追加してから、描写領域などが生成されます。

** オーバーライドすべきメソッド
*** Init()
//TO DO : AddLayerのスレッドセーフ化
Initではそれぞれのレイヤーの初期化を行ってください。たとえば、必要な画像ファイルや音声ファイルなどをロードするのに使ってください。
LayerManagerのAddLayerを呼び出した同じスレッドで動作します。そのため、後述のDraw関数にてAddLayerし、Init関数で時間のかかる処理をする場合、
その他のレイヤーの更新がなされず描写が止まってしまいます。時間のかかる処理は新しいスレッドにてAddLayerするようにしてください。
また、そのようにしてスレッドを分けてAddLayerする場合、Init関数が終了してからDraw関数へ処理が渡されます。
LayerManager側では画面バッファの中身の初期化はしません。詳しくは次のDraw関数を参照ください。

*** Draw()
自レイヤーの描写順番になった時に呼び出されます。描写処理を行ってください。
LayerBaseがSFMLのRenderTextureを継承しているため、RenderTextureのdraw関数にはthis->draw()で参照可能です。
留意点として、LayerManager側で行うのはRenderTexture::displayとRenderTexture::getTextureのみです。
従って、自動的に画面バッファの消去は行いません。各レイヤー、this->clear関数にて適宜画面をクリアして描写してください。
また、レイヤーを重ねる場合、this->clear関数のデフォルト引数では不具合が生じます（レイヤーの透過が無しになる）
そのため、クリアする際はthis->clear(sf::Color(0,0,0,0))を使用するか、this->clearLayer()を使用してください。

*** Exit()
setExitCodeメソッドにより、終了コードを0以外に設定した場合、レイヤーが終了処理に入ります。
LayerManagerは、Draw関数を呼び出した後にsetExitCodeによる終了検知を行います。
そのため、Draw関数でsetExitCodeを呼び出した場合、それ以降そのレイヤーは描写されません。
//TO DO : setExitCodeの検証後にwindow.drawを呼ぶ
ここで、Init関数で確保したリソースなどを解放したりメモリを解放したりしてください。
留意点として、setExitCodeを実行しても、Layer自身のリソースは解放されません。
レイヤーリストからも除外され、今後Draw関数が呼ばれることはありませんが、リソースは解放されません。
もしも、レイヤーを外部で変数で保持していないなどの理由でdeleteの実行が困難な場合、
非推奨ですがExit関数内にてdelete this;を行ってください。


//*** TO DO 処理はまだ実装されていません。TO DOが終了するまでこの仕様書は完全ではありません。